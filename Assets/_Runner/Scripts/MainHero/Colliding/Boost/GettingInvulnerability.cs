using ScriptableObj;
using System.Threading;
using Collision;
using StringValues;
using Cysharp.Threading.Tasks;

namespace MainHero
{
    public class GettingInvulnerability : GettingBoost
    {
        private readonly InvulnerabilityConfig _invulnerabilityConfig;
        private readonly GettingDamageCalculation _gettingDamageCalculation;
        private readonly CancellationTokenSource _cts;

        public GettingInvulnerability(InvulnerabilityConfig invulnerabilityConfig,
                                      Tags tags,
                                      GettingDamageCalculation gettingDamageCalculation,
                                      CollidingWithBoost collidingWithBoost) :
            base(collidingWithBoost, tags.Invulnerability)
        {
            _invulnerabilityConfig = invulnerabilityConfig;
            _gettingDamageCalculation = gettingDamageCalculation;

            _cts = new CancellationTokenSource();
        }

        protected override void Get()
        {
            _gettingDamageCalculation.EnabledInvulnerability();
            TimerResetSpeed().Forget();
        }

        private async UniTask TimerResetSpeed()
        {
            await UniTask.WaitForSeconds(_invulnerabilityConfig.TimeActionInSec, cancellationToken: _cts.Token);
            _gettingDamageCalculation.ResetModificator();
        }
    }
}
