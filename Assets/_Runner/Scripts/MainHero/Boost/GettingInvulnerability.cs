using ScriptableObj;
using System.Threading;
using Collision;
using StringValues;
using Cysharp.Threading.Tasks;
using System;
using Zenject;

namespace MainHero
{
    public class GettingInvulnerability : IInitializable, IDisposable, ITakebleBoost
    {
        private readonly InvulnerabilityConfig _invulnerabilityConfig;
        private readonly GettingDamageCalculation _gettingDamageCalculation;
        private readonly CollidingWithBoost _collidingWithBoost;
        
        private string _tag;

        private CancellationTokenSource _cts = new CancellationTokenSource();

        public GettingInvulnerability(InvulnerabilityConfig invulnerabilityConfig,
                                      GettingDamageCalculation gettingDamageCalculation,
                                      CollidingWithBoost collidingWithBoost)
        {
            _invulnerabilityConfig = invulnerabilityConfig;
            _gettingDamageCalculation = gettingDamageCalculation;
            _collidingWithBoost = collidingWithBoost;
        }

        public void Initialize()
        {
            _tag = Tags.Invulnerability;
            _collidingWithBoost.Collided += Take;
        }

        public void Dispose()
        {
            _collidingWithBoost.Collided -= Take;

            _cts.Cancel();
            _cts.Dispose();
        } 

        public void Take(string tag)
        {
            if (tag == _tag)
            {
                _cts.Cancel();
                _cts = new CancellationTokenSource();

                _gettingDamageCalculation.EnabledInvulnerability();
                TimerResetSpeed().Forget();
            }
        }

        private async UniTask TimerResetSpeed()
        {
            await UniTask.WaitForSeconds(_invulnerabilityConfig.TimeActionInSec, cancellationToken: _cts.Token);
            _gettingDamageCalculation.ResetModificator();
        }
    }
}
